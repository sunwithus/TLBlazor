@*ChatMessages.razor*@

@using MudBlazor
@using TL

@inject WTelegramService WT
@inject NavigationManager Navigation

@page "/chat/{id:long}"

<h5>Данные с id => @id (@ChatName):</h5>

@if (WT.User == null)
{
    <p>Вы не автроизованы.</p>
}
else
{
    @if (messages == null)
    {
        <p>Загрузка...</p>
    }
    else
    {
        <MudText Typo="Typo.caption" Color="Color.Primary">messages.Count = @messages.Count</MudText><hr />
        @foreach (var msg in messages.Messages)
        {
            <p style="white-space:pre-wrap">@msg.Date.ToString("yyyy-MM-dd HH:mm"): @GetMessageText(msg)
                @if (msg is Message message)
                {
                    @if (message.media != null)
                    {
                        @switch (message.media)
                        {
                            case MessageMediaPhoto photo:
                                <span> - Картинка (@photo.ToString())</span>
                                break;
                            case MessageMediaContact contact:
                                <span> - Котнакт (@contact.ToString())</span>
                                break;
                            case MessageMediaDice sticker:
                                <span> - Анимированный стикер (@sticker.ToString())</span>
                                break;
                            case MessageMediaGeo geo:
                                <span> - Гео данные (@geo.ToString())</span>
                                break;
                            case MessageMediaWebPage webPage:
                                <span> - Веб страница @webPage.ToString()</span>
                                break;
                            case MessageMediaStory story:
                                <span> - Сторис @story.ToString()</span>
                                break;
                            case MessageMediaDocument doc:
                                <span> - Видео или Документ (@doc.GetType())</span>
                                break;
                            default:
                                <span> - Неизвестный тип медиафайла (@message.media.GetType())</span>
                                break;
                        }
                    }
                }
                <br /><NavLink href="@($"/chat/{id}/comments?messageid={msg.ID}")"><MudText Typo="Typo.caption" Color="Color.Info">Просмотреть комментарии</MudText></NavLink>
            </p>
            <MudDivider />
        }
    }
}

@code {

    [Parameter]
    public long id { get; set; } = 0;
    private string ChatName = "";

    private Messages_MessagesBase messages;

    protected override async Task OnParametersSetAsync()
    {
        if (WT.Chats != null && WT.Chats.chats.TryGetValue(id, out var chat))
        {
            InputPeer inputPeer;
            if (chat is Channel channel)
            {
                inputPeer = new InputPeerChannel(channel.ID, channel.access_hash);
            }
            else
            {
                inputPeer = new InputPeerChat(chat.ID);
            }
            ChatName = chat.Title;

            int offset = 0;

            //https://corefork.telegram.org/methods messages.getHistory == Messages_GetHistory
            //messages.getHistory#4423e6c5 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:long = messages.Messages;
            //peer, StartWithId, TillDate, SkipElements, LimitResult,
            messages = await WT.Client.Messages_GetHistory(peer: inputPeer, offset_id: offset, add_offset: 0, limit: 50);
            StateHasChanged();
        }
        else
        {
            messages = null;
        }
    }

    private string GetMessageText(MessageBase msg)
    {
        var text = msg switch
        {
            Message message => message.message,
            MessageService service => $"[Сервисное сообщение: {service.action}]",
            _ => "[Unknown message type]"
        };

        return text;
    }

}
